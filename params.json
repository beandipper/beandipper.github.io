{"name":"Beandipper.github.io","tagline":"","body":"### Testing out source-maps with clojurescript\r\n\r\n![Happy debugging!](http://i.imgur.com/Lea1zjz.jpg?1)\r\n\r\nSo I heard about getting source maps working with clojurescript and after asking around on #clojure seangrove was nice enough to help me out. I'm basically hijacking the gist that @sgrove sent me so all credit is to him. Using lein cljsbuild, lein will create a .map file which can be used after enabling source-map debugging in browsers. [Here is a good intro if you aren't really sure what source maps are about.](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/). Now to get started:\r\n\r\n### 1. Setup your project.clj\r\nBasically what you have to do here is to add the location where a source map is located with the option :source-map. You also need the :output-dir and :id options as well. Notice that the :optimizations are set to :simple as only works tested with :simple or :advanced compilation. Do not use :optimizations :whitespace. \r\n\r\n```\r\n:cljsbuild {:test-commands {\"unit-tests\" [\"runners/phantomjs.js\"\r\n                                        \"resources/public/js/vendor/handlebars-1.0.rc.1.min.js\"\r\n                                        \"resources/private/js/unit-test.js\"]}\r\n          :builds\r\n          [{:source-paths [\"src/cljs\"],\r\n            :id \"dev\",\r\n            :compiler {:pretty-print true,\r\n                       :output-dir \"resources/public/js/bin-debug\",\r\n                       :output-to \"resources/public/js/bin-debug/main.js\",\r\n                       :externs [\"externs/jquery.js\"\r\n                                 \"resources/externs/stripe.js\"\r\n                                 \"resources/externs/handlebars.js\"\r\n                                 \"resources/externs/misc.js\"],\r\n                       :optimizations :simple\r\n                       :source-map \"resources/public/js/bin-debug/main.js.map\"\r\n                       }}]}\r\n```\r\n\r\nNow run lein cljsbuild once dev and lein lein should produce your map where you specified.\r\n\r\n### 2. Edit generated javascript file\r\n_Note: all files specified need to be available from the server_\r\n\r\nIf lein compiled everything you should have the map(here: main.js.map) and an outputted javascript file(:output-to option from above). For now this file has to be edited by hand, changing the line at the bottom of the file to an address relative to the outputted js file like so:\r\n\r\n```//@ sourceMappingURL=/js/bin-debug/main.js.map.merged```\r\n\r\nThis has to be done becase resources/public/ is probably mounted at /\r\n\r\n### 3. Edit the generated map file\r\nThe addresses in the main.js.map.merged file need to be changed similarly to the previous step so a relative path available on the server. \r\n```\r\n{\"version\":3,\r\n \"file\":\"resources/public/js/bin-debug/main.js.map\",\r\n \"sources\":\r\n [\"/Users/sgrove/src/example_clojure_app/src/cljs/settings/flow.cljs\",...]\r\n```\r\n\r\nOpen the file up and change the absolute paths to relative paths available from the front-end. If there are other paths pointing to jar files for example in maven repositories, you can ignore them.\r\n\r\n### 4. copy over clojurescript directories\r\nFinally, because the clojurescript files aren't available by the browser front-end we have to additionally copy them over to a public directory to make them publicly available like the previous steps. _Note: Do not do this for production as anybody can see your source!\r\nDo a simple copy of your clojurescript directory structure like so:\r\n\r\n```cp -r src resources/public```\r\n\r\nNow after enabling source-map debugging in your browser(see link in beginning) you should see be able to debug and set breakpoints in your clojurescript code from the browsers debugger.  \r\n\r\nOnce again thanks to Sean Grove!. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}